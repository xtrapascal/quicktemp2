<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>net472</TargetFramework>
		<AssemblyName>ThatsLit.Core</AssemblyName>
		<LangVersion>latest</LangVersion>
		<Version>1.3100.0</Version>
		<GenerateAssemblyInfo>false</GenerateAssemblyInfo>
	</PropertyGroup>
	<!-- 
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <Optimize>False</Optimize>
  </PropertyGroup> -->

	<PropertyGroup>
		<!-- folder switch -->
		<EFTPath>E:\SPT</EFTPath>
		<ManagedAssembliesPath>$(EFTPath)\EscapeFromTarkov_Data\Managed</ManagedAssembliesPath>
		<BepInExPath>$(EFTPath)\BepInEx\core</BepInExPath>
		<PluginsPath>$(EFTPath)\BepInEx\plugins</PluginsPath>
		<AssemblySearchPaths>$(BepInExPath);$(ManagedAssembliesPath);$(PluginsPath)\spt;</AssemblySearchPaths>
	</PropertyGroup>

	<ItemGroup>
		<Reference Include="BepInEx">
			<HintPath>$(BepInExPath)\BepInEx.dll</HintPath>
			<Private>False</Private>
		</Reference>
		<Reference Include="0Harmony">
			<HintPath>$(BepInExPath)\0Harmony.dll</HintPath>
			<Private>False</Private>
		</Reference>
		<Reference Include="Sirenix.Serialization">
			<HintPath>$(ManagedAssembliesPath)\Sirenix.Serialization.dll</HintPath>
		</Reference>
		<Reference Include="spt-core">
			<HintPath>$(PluginsPath)\spt\spt-core.dll</HintPath>
			<Private>False</Private>
		</Reference>
		<Reference Include="spt-reflection">
			<HintPath>$(PluginsPath)\spt\spt-reflection.dll</HintPath>
			<Private>False</Private>
		</Reference>
		<Reference Include="Assembly-CSharp">
			<HintPath>$(ManagedAssembliesPath)\Assembly-CSharp.dll</HintPath>
			<Private>False</Private>
		</Reference>
		<Reference Include="DissonanceVoip">
			<HintPath>$(ManagedAssembliesPath)\DissonanceVoip.dll</HintPath>
			<Private>False</Private>
		</Reference>
		<Reference Include="Comfort">
			<Private>False</Private>
			<HintPath>$(ManagedAssembliesPath)\Comfort.dll</HintPath>
		</Reference>
		<Reference Include="Newtonsoft.Json">
			<HintPath>$(ManagedAssembliesPath)\Newtonsoft.Json.dll</HintPath>
			<Private>False</Private>
		</Reference>
		<Reference Include="UnityEngine">
			<HintPath>$(ManagedAssembliesPath)\UnityEngine.dll</HintPath>
			<Private>False</Private>
		</Reference>
		<Reference Include="UnityEngine.CoreModule">
			<HintPath>$(ManagedAssembliesPath)\UnityEngine.CoreModule.dll</HintPath>
			<Private>False</Private>
		</Reference>
		<Reference Include="UnityEngine.UI">
			<HintPath>$(ManagedAssembliesPath)\UnityEngine.UI.dll</HintPath>
			<Private>False</Private>
		</Reference>
		<Reference Include="UnityEngine.AudioModule">
			<HintPath>$(ManagedAssembliesPath)\UnityEngine.AudioModule.dll</HintPath>
			<Private>False</Private>
		</Reference>
		<Reference Include="UnityEngine.AudioModule">
			<HintPath>$(ManagedAssembliesPath)\Unity.TextMeshPro.dll</HintPath>
			<Private>False</Private>
		</Reference>
		<Reference Include="UnityEngine.AudioModule">
			<HintPath>$(ManagedAssembliesPath)\Sirenix.Serialization.dll</HintPath>
			<Private>False</Private>
		</Reference>
		<Reference Include="UnityEngine.InputLegacyModule.dll">
			<HintPath>$(ManagedAssembliesPath)\UnityEngine.InputLegacyModule.dll</HintPath>
			<Private>False</Private>
		</Reference>
		<Reference Include="ItemComponent.Types" />
		<Reference Include="UnityEngine.JSONSerializeModule" />
		<Reference Include="UnityEngine.IMGUIModule" />
		<Reference Include="UnityEngine.PhysicsModule.dll">
			<HintPath>$(ManagedAssembliesPath)\UnityEngine.PhysicsModule.dll</HintPath>
			<Private>False</Private>
		</Reference>
		<Reference Include="UnityEngine.TerrainModule.dll">
			<HintPath>$(ManagedAssembliesPath)\UnityEngine.TerrainModule.dll</HintPath>
			<Private>False</Private>
		</Reference>
		<Reference Include="UnityEngine.TextRenderingModule" />
	</ItemGroup>

	<ItemGroup>
		<Reference Update="System">
			<Private>False</Private>
		</Reference>
	</ItemGroup>

	<ItemGroup>
		<Reference Update="System.Core">
			<Private>False</Private>
		</Reference>
	</ItemGroup>

	<ItemGroup>
		<Reference Update="System.Data">
			<Private>False</Private>
		</Reference>
	</ItemGroup>

	<ItemGroup>
		<Reference Update="System.Drawing">
			<Private>False</Private>
		</Reference>
	</ItemGroup>

	<ItemGroup>
		<Reference Update="System.IO.Compression.FileSystem">
			<Private>False</Private>
		</Reference>
	</ItemGroup>

	<ItemGroup>
		<Reference Update="System.Numerics">
			<Private>False</Private>
		</Reference>
	</ItemGroup>

	<ItemGroup>
		<Reference Update="System.Runtime.Serialization">
			<Private>False</Private>
		</Reference>
	</ItemGroup>

	<ItemGroup>
		<Reference Update="System.Xml">
			<Private>False</Private>
		</Reference>
	</ItemGroup>

	<ItemGroup>
		<Reference Update="System.Xml.Linq">
			<Private>False</Private>
		</Reference>
	</ItemGroup>

	<Target Name="CopyOutput" AfterTargets="Build">
		<ItemGroup>
			<!-- Because this ItemGroup is inside the target, this will enumerate
                all files just before calling Copy. If the ItemGroup were outside
                the target , it would enumerate the files during evaluation, before
                the build starts, which may miss files created during the build. -->
			<PackedFiles Include="$(ProjectDir)\Packed\*.*" />
		</ItemGroup>
		<Message Text="Copying new build to dist" Importance="High" />

		<Copy SourceFiles="$(TargetDir)$(AssemblyName).dll" DestinationFolder="$(PluginsPath)\ThatsLit" />
		<Copy SourceFiles="@(PackedFiles)" DestinationFolder="$(PluginsPath)\ThatsLit" />

		<Message Text="Copied build files" Importance="High" />
	</Target>
</Project>